# Instructions

During your interaction with the user, if you find anything reusable in this project (e.g. version of a library, model name), especially about a fix to a mistake you made or a correction you received, you should take note in the `Lessons` section in the `.cursorrules` file so you will not make the same mistake again. 

You should also use the `.cursorrules` file as a Scratchpad to organize your thoughts. Especially when you receive a new task, you should first review the content of the Scratchpad, clear old different task if necessary, first explain the task, and plan the steps you need to take to complete the task. You can use todo markers to indicate the progress, e.g.
[X] Task 1
[ ] Task 2

Also update the progress of the task in the Scratchpad when you finish a subtask.
Especially when you finished a milestone, it will help to improve your depth of task accomplishment to use the Scratchpad to reflect and plan.
The goal is to help you maintain a big picture as well as the progress of the task. Always refer to the Scratchpad when you plan the next step.

# Question-Only Mode

If the user starts a prompt with the word "question", respond concisely to their question without taking any action. Do not:
- Run terminal commands
- Edit files
- Search the codebase
- Make suggestions for changes
- Create pull requests

Simply provide a direct, concise answer to their question and wait for further instructions.

# Git Branching Workflow

## Branch Types
1. main (Production)
   - Always stable and deployable
   - Direct commits not allowed
   - Changes come only through PR merges from dev
   - Protected branch requiring PR reviews

2. dev (Development)
   - Main development branch
   - Feature branches merge here first
   - Used for preview deployments
   - Must pass tests before merging to main

3. feature/* (Feature Branches)
   - Created from dev branch
   - One branch per feature
   - Format: feature/descriptive-name
   - Merged back to dev when complete

## Branch Creation Rules
- Always push new branches to GitHub immediately after creation
- Use `git push -u origin <branch-name>` when creating a new branch
- Ensure the branch is visible on GitHub before starting PR process
- When creating a branch from an existing one, make sure you're starting with the latest changes

## Pull Request Templates

1. Feature Branch to Dev:
   ```markdown
   Title: [Cursor] Feature Description
   Base: dev
   Compare: feature/your-feature-name
   
   ## Changes
   - List specific changes made
   - One change per line
   - Be specific and clear
   
   ## Testing
   - List what was tested
   - Include preview deployment checks
   - Note any specific test cases
   
   ## Notes
   - Any additional context
   - Breaking changes if any
   - Dependencies or requirements
   ```

2. Dev to Main (Production):
   ```markdown
   Title: [Cursor] Merge dev into main for production
   Base: main
   Compare: dev
   
   ## Changes
   - List all features being promoted to production
   - Note any major updates or changes
   - Reference related PR numbers if applicable
   
   ## Testing
   - Confirm all changes verified in dev
   - List preview deployments tested
   - Note any specific production considerations
   
   ## Notes
   - Any deployment requirements
   - Breaking changes if any
   - Required environment variables
   ```

## PR Management Rules
- All pull requests will be handled through GitHub UI
- NO git commands for PR operations should be executed by Cursor
- Feature branches to dev: Use squash and merge
- Dev to main: Use regular merge
- Always maintain clean git history
- Include "[Cursor] " prefix in PR titles

## PR Instructions Checklist
Every time we talk about doing a pull request, do not execute any commands to start the process, as the user will be doing it on GitHub manually every time. Instead, provide the following information in a clear, organized format:

1. Which branch needs to be base, which is compare?
2. What's the title? (Always include "[Cursor] " prefix)
3. What's the complete description to copy/paste?
4. Are we doing squash and merge or regular merge?
5. Should the branch be deleted after merging?
6. Do we need to move back to a different branch after PR?

For feature branches to dev, always use squash and merge to maintain clean history.
For dev to main, always use regular merge to preserve feature commits.

# Tools

Note all the tools are in python3. So in the case you need to do batch processing, you can always consult the python files and write your own script.

[NOTE TO CURSOR: Since no API key is configured, please ignore both the Screenshot Verification and LLM sections below.]
[NOTE TO USER: If you have configured or plan to configure an API key in the future, simply delete these two notice lines to enable these features.]

## Screenshot Verification

The screenshot verification workflow allows you to capture screenshots of web pages and verify their appearance using LLMs. The following tools are available:

1. Screenshot Capture:
```bash
venv/bin/python3 tools/screenshot_utils.py URL [--output OUTPUT] [--width WIDTH] [--height HEIGHT]
```

2. LLM Verification with Images:
```bash
venv/bin/python3 tools/llm_api.py --prompt "Your verification question" --provider {openai|anthropic} --image path/to/screenshot.png
```

Example workflow:
```python
from screenshot_utils import take_screenshot_sync
from llm_api import query_llm

# Take a screenshot

screenshot_path = take_screenshot_sync('https://example.com', 'screenshot.png')

# Verify with LLM

response = query_llm(
    "What is the background color and title of this webpage?",
    provider="openai",  # or "anthropic"
    image_path=screenshot_path
)
print(response)
```

## LLM

You always have an LLM at your side to help you with the task. For simple tasks, you could invoke the LLM by running the following command:
```
venv/bin/python3 ./tools/llm_api.py --prompt "What is the capital of France?" --provider "anthropic"
```

The LLM API supports multiple providers:
- OpenAI (default, model: gpt-4o)
- Azure OpenAI (model: configured via AZURE_OPENAI_MODEL_DEPLOYMENT in .env file, defaults to gpt-4o-ms)
- DeepSeek (model: deepseek-chat)
- Anthropic (model: claude-3-sonnet-20240229)
- Gemini (model: gemini-pro)
- Local LLM (model: Qwen/Qwen2.5-32B-Instruct-AWQ)

But usually it's a better idea to check the content of the file and use the APIs in the `tools/llm_api.py` file to invoke the LLM if needed.

## Web browser

You could use the `tools/web_scraper.py` file to scrape the web.
```bash
venv/bin/python3 ./tools/web_scraper.py --max-concurrent 3 URL1 URL2 URL3
```
This will output the content of the web pages.

## Search engine

You could use the `tools/search_engine.py` file to search the web.
```bash
venv/bin/python3 ./tools/search_engine.py "your search keywords"
```
This will output the search results in the following format:
```
URL: https://example.com
Title: This is the title of the search result
Snippet: This is a snippet of the search result
```
If needed, you can further use the `web_scraper.py` file to scrape the web page content.

# Scratchpad Usage

Use the `.cursorrules` file as a Scratchpad to organize your thoughts. When receiving a new task:

1. Review the content of the Scratchpad
2. Clear old tasks if necessary
3. Explain the new task and plan the steps needed to complete it
4. Use todo markers to track progress:
   [X] Completed task
   [ ] Pending task

Update the progress in the Scratchpad when finishing subtasks. After completing milestones, reflect and plan the next steps. This maintains a big picture view and documents the project's progress.

Structure the Scratchpad with these sections:
- Current Project Status & Roadmap
- Completed Major Milestones
- Current Task (with implementation steps)
- Upcoming Tasks
- Error Resolution Documentation

# Error Resolution Documentation

Document errors and their solutions in a consistent format:

1. Issue Name
   - Issue: Brief description of the problem
   - Root Cause: What caused the issue
   - Resolution: How it was fixed
   - Prevention: Steps to prevent recurrence

This creates a knowledge base for common issues and their solutions, helping prevent repeated problems.

# Content Standardization

If the project involves content management:
- Standardize on a single content format (Markdown recommended)
- Create style guides for content creation
- Implement validation utilities for content checking
- Document content requirements for each component
- Establish clear conversion processes for legacy content

# Safety Measures

Implement these safety practices:
- Add warning comments to configuration files
- Include purpose documentation for each configuration section
- Implement validation checks for critical configuration values
- Create separation between environment-specific and shared configurations
- Document clear procedures for branch synchronization
- Create pre-merge checklists for critical files

# Lessons

## User Specified Lessons

- You have a python3 venv in ./venv. Use it.
- Include info useful for debugging in the program output.
- Read the file before you try to edit it.
- Due to Cursor's limit, when you use `git` and `gh` and need to submit a multiline commit message, first write the message in a file, and then use `git commit -F <filename>` or similar command to commit. And then remove the file. Include "[Cursor] " in the commit message and PR title.
- Always push new feature branches to GitHub immediately after creation with `git push -u origin <branch-name>` to ensure they're available when creating PRs.

## Cursor learned

- For search results, ensure proper handling of different character encodings (UTF-8) for international queries
- Add debug information to stderr while keeping the main output clean in stdout for better pipeline integration
- When using seaborn styles in matplotlib, use 'seaborn-v0_8' instead of 'seaborn' as the style name due to recent seaborn version changes
- Use 'gpt-4o' as the model name for OpenAI's GPT-4 with vision capabilities
- When creating component layouts that need to maintain equal heights, use flex-col and h-full CSS properties
- For testimonial or review components, use a grid layout with responsive columns (md:grid-cols-3)
- Make text content evergreen whenever possible to avoid frequent updates
- Use smaller text sizes (text-lg) when displaying multiple testimonials in a grid to maintain readability

# Scratchpad

# Current Project Status & Roadmap
- Enhancing Crystal Seed Tarot website with improved UX and evergreen content
- Currently working on homepage content improvements and layout enhancements
- Moving toward completion of feature/blog-copy branch for PR to dev
- Focus on making content more evergreen and responsive

# Completed Major Milestones
- Updated "What Our Clients Say" section to display 3 testimonials in a responsive grid
- Made testimonial text smaller (text-lg) to fit better in the card layout
- Created hover effects and consistent styling for testimonial cards
- Updated Tarot Classes content with evergreen course information and specific format details
- Fixed private events image path on homepage
- Simplified About page by removing additional images and improving layout
- Added frosted glass effect to Blog Hero image
- Made all homepage text white for better visibility and consistency

# Current Task
[X] Update "What Our Clients Say" section to display three reviews
[X] Make testimonial text smaller to fit better in cards
[X] Update Tarot Classes text with evergreen course information
[X] Add specific course format details (4 weeks, 2 hour sessions)
[X] Commit all changes to feature/blog-copy branch
[X] Prepare PR details for merging to dev branch

# Upcoming Tasks
- Create PR to merge feature/blog-copy into dev
- Test all changes in development environment
- Consider additional content updates for improved user engagement
- Review mobile responsiveness of all components
- Consider adding more features to the Blog section

# Recent Observations
- Grid layouts with responsive columns work well for showcasing multiple items
- Evergreen content helps minimize future maintenance
- Consistent styling (text color, backgrounds, effects) improves visual cohesion
- Specific course details help set clear expectations for potential students

# Debugging and Reasoning Framework

## Core Debugging Principles

1. Systematic Analysis:
   - Map system components and dependencies
   - Document data flows and state changes
   - Identify potential bottlenecks
   - Note architectural boundaries
   - Track system assumptions

2. Problem Decomposition:
   - Explain issues in plain language
   - Use "Five Whys" technique
   - Document reproduction steps
   - Map error propagation paths
   - Identify trigger conditions

3. Solution Strategy:
   a) Immediate Actions:
      - Quick validations
      - Logging enhancements
      - Error handling checks
      - State verification
      - Resource monitoring

   b) Tactical Improvements:
      - Targeted refactoring
      - Component isolation
      - Interface hardening
      - Test coverage
      - Documentation updates

   c) Strategic Changes:
      - Architecture evolution
      - System hardening
      - Process refinement
      - Tool enhancement
      - Knowledge sharing

## Async Code Debugging

4. Declaration Verification:
   - Confirm async/await usage on time-consuming operations
   - Check for missing await operators
   - Verify proper async boundaries
   - Document async workflows

5. Common Pitfalls:
   - Missing await operators
   - Race conditions
   - Memory leaks in async contexts
   - Improper error propagation
   - Resource cleanup issues

6. Testing Strategy:
   - Verify error paths
   - Test timeout handling
   - Check cancellation
   - Validate state transitions
   - Monitor resource usage

## Documentation Search Strategy

1. Query Construction:
   - Include version numbers
   - Specify framework/language
   - Use exact error messages
   - Add context keywords

2. Perplexity Search Template:
   ```
   Framework/Language: [Name + Version]
   Topic: [Specific Feature/Error]
   Context: [Current Use Case]
   Request: "Find official documentation for [topic] in [framework] [version], focusing on [specific aspects]"
   ```

3. Information Validation:
   - Verify version compatibility
   - Check for deprecations
   - Review breaking changes
   - Note compatibility issues
   - Document findings

## Reasoning Process
[STRUCTURED THINKING - Required for complex issues]

4. Uncertainty Phase:
   - Acknowledge complexity
   - List unknowns
   - State assumptions
   - Format: "This is complex because... We don't yet know... Several factors could..."

5. Analysis Phase:
   - Examine evidence
   - Test assumptions
   - Find patterns
   - Format: "Looking at the evidence... If we consider... This connects to..."

6. Confidence Phase:
   - Validate conclusions
   - Address counterpoints
   - Format: "Based on this analysis... We can confidently say... This will work because..."

## Debug Process Checklist

7. Initial Assessment:
   [ ] Reproduce consistently
   [ ] Document conditions
   [ ] Identify components
   [ ] Gather logs/data

8. Root Cause Analysis:
   [ ] Apply "Five Whys"
   [ ] Map error flow
   [ ] Test assumptions
   [ ] Verify components

9. Solution Development:
   [ ] List approaches
   [ ] Consider trade-offs
   [ ] Plan implementation
   [ ] Define success criteria

10. Implementation:
   [ ] Create test case
   [ ] Implement minimal fix
   [ ] Add tests
   [ ] Document changes

11. Verification:
   [ ] Test thoroughly
   [ ] Check performance
   [ ] Verify no regressions
   [ ] Update documentation

Remember:
12. Question all assumptions
13. Start simple, add complexity only when needed
14. Document decisions and rationale
15. Focus on root causes, not symptoms
16. Verify changes with tests
17. Share knowledge and improvements
18. When stuck, ask for Perplexity searches with specific queries
19. Consider performance implications
20. Keep security in mind
21. Maintain backward compatibility